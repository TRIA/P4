#include "efcp_header_format.npl"

// Use defines until registers are implemented
#define VLAN 0x8100
#define EFCP 0xD1F

/*
* A struct is also used to package the headers into a header group level struct.
* Header groups are required to define a packet in the NPL.
* Header group level structs are packed to specify a packet.
* A header group level struct must only instantiate structs used to declare header types.
* bit/bit[] are not allowed. Arrays of header groups are not allowed.
*/

/*EFCP group level struct*/
struct efcp_group {
    fields {
        efcp_t         efcp;
    }
}

/*Level 2 group level struct*/
struct group1_t {
    fields {
        l2_t         l2;
        vlan_t       vlan;
        }
}

/*
* A packet level struct is used to aggregate multiple headers or header
* groups into a packet. The header groups must follow the order in which
* the groups appear across all packets. 
*/
struct ing_pkt_t {
    fields {
        group1_t group1;
        efcp_group efcp_hdr;
        }
}

struct egr_pkt_t {
    fields {
        group1_t group1;
        efcp_group efcp_hdr;
    }
}

/*
* Packet instances are declared using the keyword packet
*/
packet ing_pkt_t ingress_pkt;
packet egr_pkt_t egress_pkt;

parser_node start {
    root_node : 1; 
    switch(obj_bus.port_type_cfg) {
        0x3     :   next_node ethernet;
        default :   next_node ingress;
    }
}

parser_node ethernet {
  /*Specify which header instance to extract here.
  * All fields of a specified header instance are extracted here.
  * Packet parsing pointer also moves after extract_fields.
  */
    extract_fields(ingress_pkt.group1.l2); 

    if (control_id.ts_enable == 0) { 
        if (control_id.otpid_enable[3:3] && latest.ethertype == VLAN) {
            /*0x8100 VLAN-tagged frame (IEEE 802.1Q) and Shortest Path Bridging
            IEEE 802.1aq with NNI compatibility[10]*/
            print("He entrat en latest.ethertype = 0x8100\n");
            next_node vlan;
        } 
        
        if (latest.ethertype == EFCP) {
            //0xD1F0
            print("He entrat en latest.ethertype = D1F\n");
            next_node efcp;
        }                         
        
        switch(latest.ethertype) {
            0xD1F0            : next_node efcp;
            default           : next_node ingress;
        }        
    }
    else {
        next_node ingress;
    }
}


parser_node vlan {
    print("He entrado en el parser_node vlan\n");
    extract_fields(ingress_pkt.group1.vlan);
    next_node efcp;
}

parser_node efcp {
    print("He entrado en el parser_node efcp\n");
    extract_fields(ingress_pkt.efcp_hdr.efcp);
    next_node ingress;
}

parser_node ingress {
   /*Specify that this is the last node of this tree.*/
    end_node : 1; 
}